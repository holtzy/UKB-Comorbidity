# Remove chapter 20 to 22 because it is not really disease
tokeep=which( ! colnames(comoL1) %in% c("External.Causes","Factor.influencing","Special") )
comoL1= comoL1[ tokeep, tokeep ]
# Remove chapter with less than 100 case (remove perinatal chapter that is quite useless with 41 cases in total for the whole chapter)
toremove = which( diag(comoL1) < 100 )
comoL1= comoL1[ -toremove, -toremove ]
# Create long format
comoL1_long = comoL1 %>% as.data.frame() %>% cbind(disease1 = rownames(comoL1)) %>% gather(disease2, value, -disease1 ) %>% filter(!is.na(value))
datatable(comoL1_long, filter = 'top', rownames = FALSE, options = list(pageLength = 5) )
# Load matrix
comoL2=read.table("0_DATA/Como_Ocurrence_L2.txt.gz", sep=";", header=T)
comoL2=as.matrix(comoL2)
rownames(comoL2)=colnames(comoL2)
comoL2[lower.tri(comoL2)] <- NA
# Add significant labels
tomatch = colnames(comoL2) %>% gsub("Block.", "Block ", .) %>% gsub("\\.", "-", .)
signif = ICD$meaning_L2[ match( tomatch, ICD$coding_L2) ] %>% droplevels
colnames(comoL2)=signif
rownames(comoL2)=signif
# Remove categories in groups U to Z
tokeep=which( ! substr(as.character(colnames(comoL2)),1,1) %in% c("U","V","W","X","Y","Z") )
comoL2= comoL2[ tokeep, tokeep ]
# Remove categories that are to rare (prevalence < 100)
toremove = which( diag(comoL2) < 100 )
comoL2= comoL2[ -toremove, -toremove ]
# Create long format
comoL2_long = comoL2 %>% as.data.frame() %>% cbind(disease1 = rownames(comoL2)) %>% gather(disease2, value, -disease1 ) %>% filter(!is.na(value))
datatable(comoL2_long, filter = 'top', rownames = FALSE, options = list(pageLength = 5) )
# Load matrix
comoL3=read.table("0_DATA/Como_Ocurrence_L3.txt.gz", sep=";", header=T)
comoL3=as.matrix(comoL3)
rownames(comoL3)=colnames(comoL3)
comoL3[lower.tri(comoL3)] <- NA
# Add significant labels
tomatch = colnames(comoL3)
signif = ICD$meaning_L3[ match( tomatch, ICD$coding_L3) ] %>% droplevels
colnames(comoL3)=signif
rownames(comoL3)=signif
# Remove categories in groups U to Z
tokeep=which( ! substr(as.character(colnames(comoL3)),1,1) %in% c("U","V","W","X","Y","Z") )
comoL3= comoL3[ tokeep, tokeep ]
# Remove categories that are to rare (prevalence < 20)
toremove = which( diag(comoL3) < 20 )
length(toremove)
comoL3= comoL3[ -toremove, -toremove ]
dim(comoL3)
# Create long format
comoL3_long = comoL3 %>% as.data.frame() %>% cbind(disease1 = rownames(comoL3)) %>% gather(disease2, value, -disease1 ) %>% filter(!is.na(value))
#datatable(comoL3_long, filter = 'top', rownames = FALSE , options = list(pageLength = 5))
load("0_DATA/Como_Objects.R")
datatable(CI_L1_long, filter = 'top', rownames = FALSE , options = list(pageLength = 5))
datatable(CI_L2_long, filter = 'top', rownames = FALSE, options = list(pageLength = 5) )
#datatable(CI_L3_long, filter = 'top', rownames = FALSE, options = list(pageLength = 5) )
#save(comoL1, comoL1_long, comoL2, comoL2_long, comoL3, comoL3_long, CI_L1, CI_L1_long, CI_L2, CI_L2_long, CI_L3, CI_L3_long, file="0_DATA/Como_Objects.R")
#load("0_DATA/Como_Objects.R")
comoL1_long %>% ungroup() %>% filter(disease1 == disease2) %>% arrange(value) %>% mutate(disease1 =factor(disease1 , disease1 )) %>%
ggplot( aes(x=disease1, y=value)) +
geom_bar(stat="identity", fill='skyblue') +
xlab("") +
ylab("Number of cases in the UKB") +
coord_flip()
comoL2_long %>% ungroup() %>% filter(disease1 == disease2) %>% arrange(value) %>% mutate(disease1 =factor(disease1 , disease1 )) %>%
head(20) %>%
ggplot( aes(x=disease1, y=value)) +
geom_bar(stat="identity", fill='skyblue') +
xlab("") +
ylab("Number of cases in the UKB") +
coord_flip()
comoL3_long %>% filter(disease1==disease2)%>%
ggplot( aes(x=value) ) +
geom_density( fill="skyblue", color=NA, alpha=0.6) +
scale_x_log10( breaks=c(10,100,1000,10000,100000) , labels = scales::comma) +
xlab("Occurence in # of cases") +
geom_vline(xintercept = 500, linetype="dashed")
tmp=comoL3_long %>% filter( substr(disease1, 1 , 3) == "R19") %>% filter(disease1==disease2)
datatable(tmp, rownames = FALSE, options = list(pageLength = 5, dom='t') )
#CI_L3_long %>% filter( substr(D1, 1 , 3) == "R19") %>% arrange(desc(value)) %>% head(100)
pedersen=read.table("0_DATA/Occurence_Mental_Disease_Litterature.csv", sep=";", header=T)
p=comoL3_long %>%
filter(disease1==disease2) %>%
mutate( code=substr(disease1,1,3)) %>%
select(code, disease1, value) %>%
mutate(value=value/500000*100) %>%
left_join( . , pedersen, by=c("code"="Disease")) %>%
filter(!is.na(Pedersen_Danish_Incidence_Male)) %>%
#filter(value<4000) %>%
ggplot( aes(x=value, y=Pedersen_Danish_Incidence_Female, label=disease1)) +
geom_point(size=3) +
geom_text_repel(size=3, color="grey") +
xlab("Prevalence in UKB") +
ylab("Pedersen et al.") +
xlim(0,4) +
ylim(0,4)
p
p +  scale_x_log10() + xlab("Prevalence in UKB (Log scale)")
comoL1_long %>%
filter(disease1 != disease2) %>%
ggplot( aes(x=value)) +
geom_histogram(bins=90, fill=rgb(0.2,0.4,0.6,0.6)) +
ggtitle(paste("Level1"," | ", nrow(comoL1), " levels", " | ", nrow(comoL1)^2/2, " pairs", " | ", nrow(comoL1_long[which(comoL1_long$value==0),]), " pairs with 0 person", " | ", "average = ", round(mean(comoL1_long$value),0), sep="")) +
xlab("Number of people with the disease pair")
comoL2_long %>%
filter(disease1 != disease2) %>%
ggplot( aes(x=value)) +
geom_histogram(bins=90, fill=rgb(0.2,0.4,0.6,0.6)) +
ggtitle(paste("Level2"," | ", nrow(comoL2), " levels", " | ", nrow(comoL2)^2/2, " pairs", " | ", nrow(comoL2_long[which(comoL2_long$value==0),]), " pairs with 0 person", " | ", "average = ", round(mean(comoL2_long$value),0), sep="")) +
xlab("Number of people with the disease pair") +
scale_x_log10()
comoL3_long %>%
filter(disease1 != disease2) %>%
ggplot( aes(x=value)) +
geom_histogram(bins=90, fill=rgb(0.2,0.4,0.6,0.6)) +
ggtitle(paste("Level3"," | ", nrow(comoL3), " levels", " | ", nrow(comoL3)^2/2, " pairs", " | ", nrow(comoL3_long[which(comoL3_long$value==0),]), " pairs with 0 person", " | ", "average = ", round(mean(comoL3_long$value),0), sep="")) +
xlab("Number of people with the disease pair")+
scale_x_log10()
tmp=comoL1_long %>% filter(disease1 != disease2) %>% arrange(desc(value)) %>% head(50)
datatable(tmp, rownames = FALSE , options = list(pageLength = 5) )
tmp=comoL2_long %>% filter(disease1 != disease2) %>% arrange(desc(value)) %>% head(50)
datatable(tmp, rownames = FALSE , options = list(pageLength = 5) )
tmp=comoL3_long %>% filter(disease1 != disease2) %>% arrange(desc(value)) %>% droplevels() %>% head(50)
datatable(tmp, rownames = FALSE , options = list(pageLength = 5) )
tmp=comoL1
diag(tmp)=NA
d3heatmap(tmp, Rowv=FALSE, Colv=FALSE, cexRow=0.7, cexCol=0.7, color="Blues")
CI_L1_long %>%
filter(value<100) %>%
ggplot( aes(x=value)) +
geom_histogram(bins=90, fill=rgb(0.2,0.4,0.6,0.6)) +
ggtitle(paste("Level1"," | ", nrow(comoL1), " levels", " | ", nrow(comoL1)^2/2, " pairs", " | ", nrow(CI_L1_long[which(CI_L1_long$value==0),]), " pairs with 0 person", " | ", "median = ", round(median(CI_L1_long$value),0), sep="")) +
#scale_x_log10() +
theme_classic() +
geom_vline(xintercept=1, linetype="dashed") +
theme(
axis.line = element_blank(),
axis.title=element_text(size=12)
) +
xlab("Comorbidity index (Log scale)")
CI_L2_long %>%
ggplot( aes(x=value)) +
geom_histogram(bins=90, fill=rgb(0.2,0.4,0.6,0.6)) +
ggtitle(paste("Level2"," | ", nrow(comoL2), " levels", " | ", nrow(comoL2)^2/2, " pairs", " | ", nrow(CI_L2_long[which(CI_L2_long$value==0),]), " pairs with 0 person", " | ", "median = ", round(median(CI_L2_long$value),2), sep="")) +
scale_x_log10() +
theme_classic() +
geom_vline(xintercept=1, linetype="dashed") +
theme(
axis.line = element_blank(),
axis.title=element_text(size=12)
) +
xlab("Comorbidity index (Log scale)")
CI_L3_long %>%
#filter(value<100) %>%
ggplot( aes(x=value)) +
geom_histogram(bins=90, fill=rgb(0.2,0.4,0.6,0.6)) +
ggtitle(paste("Level3"," | ", nrow(comoL3), " levels", " | ", nrow(comoL3)^2/2, " pairs", " | ", nrow(CI_L3_long[which(CI_L3_long$value==0),]), " pairs with 0 person", " | ", "median = ", round(median(CI_L3_long$value),2), sep="")) +
scale_x_log10() +
theme_classic() +
geom_vline(xintercept=1, linetype="dashed") +
theme(
axis.line = element_blank(),
axis.title=element_text(size=12)
) +
xlab("Comorbidity index (Log scale)")
CI_L2_long %>%
mutate(level1.1=substring(D1,1,1)) %>%
mutate(level1.2=substring(D2,1,1)) %>%
mutate(group=ifelse(level1.1 == level1.2, level1.1, NA )) %>%
filter(!is.na(group)) %>%
droplevels() %>%
#filter(value<100) %>%
ggplot( aes(x=value+1, fill=group)) +
#geom_histogram(bins=90, fill=rgb(0.2,0.4,0.6,0.6)) +
geom_density() +
scale_x_log10() +
theme_classic() +
geom_vline(xintercept=2, linetype="dashed") +
theme(
legend.position="none",
axis.line = element_blank(),
axis.title=element_text(size=12),
axis.ticks.y  = element_blank(),
axis.text.y = element_blank(),
strip.background = element_rect(colour = "transparent" ),
strip.text.x = element_text(margin = margin(0,0,0,0, "cm"))
) +
facet_wrap(~group, scale="free_y") +
xlab("Comorbidity index (Log scale)")
CI_L2_long %>%
mutate(level1.1=substring(D1,1,1)) %>%
mutate(level1.2=substring(D2,1,1)) %>%
mutate(group=ifelse(level1.1 == level1.2, level1.1, NA )) %>%
filter(!is.na(group)) %>%
droplevels() %>%
ggplot( aes(x=group, fill=group, y=value)) +
geom_boxplot() +
theme_classic() +
geom_hline(yintercept=1, linetype="dashed") +
theme(
legend.position="none",
axis.line = element_blank(),
axis.title=element_text(size=12),
#axis.ticks.y  = element_blank(),
#axis.text.y = element_blank(),
) +
xlab("Comorbidity index (Log scale)")
CI_L2_long %>%
mutate(level1.1=substring(D1,1,1)) %>%
mutate(level1.2=substring(D2,1,1)) %>%
mutate(group=ifelse(level1.1 == level1.2, level1.1, NA )) %>%
filter(!is.na(group)) %>%
mutate(color=ifelse(group=="F", "Mental Diseases", "Other")) %>%
droplevels() %>%
ggplot( aes(x=reorder(group, value), fill=color, colour=color, y=value+1)) +
geom_violin(width=3) +
theme_classic() +
geom_hline(yintercept=2, linetype="dashed") +
scale_y_log10() +
theme(
legend.position="none",
axis.line = element_blank(),
axis.title=element_text(size=12)
) +
xlab("Groups (level1)") +
ylab("Comorbidity Index (Log)")
tmp=CI_L1_long %>% arrange(desc(value)) %>% head(50)
datatable(tmp, rownames = FALSE , options = list(pageLength = 5) )
tmp=CI_L2_long %>% arrange(desc(value)) %>% head(50)
datatable(tmp, rownames = FALSE , options = list(pageLength = 5) )
# Add the information of the occurence for each pair.
tmp=comoL3_long %>% filter(disease1==disease2) %>% mutate(occurence=value) %>% select(disease1, occurence)
tab=CI_L3_long %>%
left_join(., comoL3_long, by=c("D1"="disease1", "D2"="disease2")) %>%
left_join(., tmp, by=c("D1"="disease1")) %>%
left_join(., tmp, by=c("D2"="disease1")) %>%
arrange(desc(value.x)) %>% head(20)
datatable(tab, rownames = FALSE , options = list(pageLength = 5) )
# Add the information of the occurence for each pair.
tmp=comoL3_long %>% filter(disease1==disease2) %>% mutate(occurence=value) %>% select(disease1, occurence)
tab=CI_L3_long %>%
left_join(., comoL3_long, by=c("D1"="disease1", "D2"="disease2")) %>%
left_join(., tmp, by=c("D1"="disease1")) %>%
left_join(., tmp, by=c("D2"="disease1")) %>%
rowwise() %>% mutate(occurence_mean = mean(c(occurence.x, occurence.y))) %>%
arrange(value.x, desc(occurence_mean)) %>%
head(100)
datatable(tab, rownames = FALSE , options = list(pageLength = 5) )
# Add the information of the occurence for each pair.
tmp=comoL3_long %>% filter(disease1==disease2) %>% mutate(occurence=value) %>% select(disease1, occurence)
tab=CI_L3_long %>%
left_join(., comoL3_long, by=c("D1"="disease1", "D2"="disease2")) %>%
left_join(., tmp, by=c("D1"="disease1")) %>%
left_join(., tmp, by=c("D2"="disease1")) %>%
rowwise() %>% mutate(occurence_mean = mean(c(occurence.x, occurence.y))) %>%
arrange(value.x, desc(occurence_mean))
a=tab  %>% filter(occurence.x>15000, occurence.y>15000)
datatable(a, rownames = FALSE , options = list(pageLength = 5) )
d3heatmap(CI_L1, Rowv=FALSE, Colv=FALSE, cexRow=0.7, cexCol=0.7, xaxis_height = 100, yaxis_width = 100)
#d3heatmap(CI_L1, distfun = dist, cexRow=0.7, cexCol=0.7, xaxis_height = 100, yaxis_width = 100)
#d3heatmap(CI_L1, cexRow=0.7, cexCol=0.7, distfun=function(x){as.dist(1-cor(t(x),use="pairwise.complete.obs")/2)} )
#, hclust=function(x) hclust(x,method="complete")}   )
# Create edges data frame. I start with the leaf level only
edges=ICD %>% filter(meaning_L2 %in% colnames(comoL2) ) %>% select(meaning_L1, meaning_L2) %>% unique
colnames(edges)=c("from", "to")
# Create points data frame. For each point I need it's size (num of occurence of the disease) + its group (to set its color)
vertices = data.frame(name = unique( as.character(edges$to)) )
tmp=comoL2_long %>% filter(disease1 == disease2) %>% select(disease1, val=value)
vertices = merge(vertices, tmp, by.x="name", by.y="disease1", all.x=T)
vertices = merge( vertices, ICD, by.x="name", by.y = "meaning_L2", all.x=T) %>% select(name, val, meaning_L1) %>% unique
# calculate the ANGLE of the labels
my_num=nrow(vertices)
vertices$index=seq(1, nrow(vertices))
vertices$angle= 90 - 360 * vertices$index/my_num
# calculate the alignment of labels: right or left
# If I am on the left part of the plot, my labels have currently an angle < -90
vertices$hjust<-ifelse( vertices$angle < -90, 1, 0)
# flip angle BY to make them readable
vertices$angle<-ifelse(vertices$angle < -90, vertices$angle+180, vertices$angle)
# Reduce lenght of names
vertices = vertices %>% mutate( labels=name)
# Add the upper part of the tree = not final leaves to edges
top = ICD %>% select(meaning_L1) %>% mutate(origine=0) %>% select(origine, meaning_L1) %>% unique %>% mutate()
colnames(top)=c("from", "to")
edges=rbind(top, edges)
# and add it to vertices
toadd=data.frame(name=c(0,as.character(top$to)) ,val=NA ,meaning_L1=NA, index=NA, angle=NA, hjust=NA, labels=NA)
vertices=rbind(toadd, vertices)
back_color="white"
# Create graph structure
mygraph <- graph_from_data_frame( edges, vertices = vertices)
plot_bundle=function(mythres){
# Transform the adjacency connection of comorbidity index in 2 vectors: from and to.
threshold=mythres
connexions = CI_L2_long %>% filter(value>threshold) %>% select(D1, D2)
from = match( connexions$D1, vertices$name)
to = match( connexions$D2, vertices$name)
# Do the graph
p=ggraph(mygraph, layout = 'dendrogram', circular = TRUE) +
geom_conn_bundle(data = get_con(from = from, to = to), alpha = 0.2, tension = 0.9, aes(size=11, colour = ..index..)) +
# Make the size depends how often we see the disease?
geom_node_point(aes(filter = leaf, x = x*1.05, y=y*1.05, size=val, colour=meaning_L1), alpha=0.6) +
scale_color_manual(values= colorRampPalette(brewer.pal(9,"Paired"))(22)[sample(seq(1,22),22)]) +
scale_size_continuous(range = c(0.5,11)) +
geom_node_text(aes(x = x*1.1, y=y*1.1, filter = leaf, label=labels, angle = angle, color=meaning_L1, hjust=hjust), size=1.5, alpha=1) +
coord_fixed() +
labs(x="", y="") +
theme_classic() +
theme(
legend.position="none",
axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank(),
line = element_blank(),
plot.margin=unit(c(0,0,0,0),"cm"),
plot.background = element_rect(fill = back_color),
panel.background = element_rect(fill = back_color, colour=back_color)
) +
expand_limits(x = c(-2, 2), y = c(-2, 2))
#geom_segment( x = 2, y = 2, xend = 10, yend = 10, colour = "black", alpha=1, size=4 , inherit.aes = FALSE ) +
return(p)
}
png("IMG/Edge_Bundle_Como_L2_thres10.png", width=200, height=200, units = "mm", res=300)
plot_bundle(10)
dev.off()
png("IMG/Edge_Bundle_Como_L2_thres10.png", width=200, height=200, units = "mm", res=300)
plot_bundle(10)
dev.off()
png("IMG/Edge_Bundle_Como_L2_thres10.png", width=200, height=200, units = "mm", res=300)
plot_bundle(10)
dev.off()
png("IMG/Edge_Bundle_Como_L2_thres10.png", width=200, height=200, units = "mm", res=300)
plot_bundle(5)
dev.off()
make_edge_bundle=function(x, nchar, threshold, my_expand, title_size, label_size){
# select a chapter
chapter=x
chapter_name = ICD %>% filter(node_L1==x) %>% mutate(long=gsub("Diseases of the", "", long)) %>% select(short)   %>% unique()
# Create the hierarchy data frame of the data.
hierarchy= ICD %>%
filter(node_L1==chapter) %>%
select(meaning_L2, meaning_L3) %>%
arrange(meaning_L2, meaning_L3) %>%
unique()
colnames(hierarchy)=c("from", "to")
# Create final nodes (leaves) data frame. For each point I need its size (num of occurence of the disease) + its group (to set its color) + it's heritability
vertices = data.frame(name = unique( as.character(hierarchy$to)) )
tmp=comoL3_long %>% filter(disease1 == disease2) %>% select(disease1, value) %>% mutate(val=value/max(value)*100)
vertices = merge(vertices, tmp, by.x="name", by.y="disease1", all.x=T)
vertices = merge( vertices, ICD, by.x="name", by.y = "meaning_L3", all.x=T) %>% select(name, val, meaning_L1, meaning_L2) %>% unique
# calculate the ANGLE of the labels
my_num=nrow(vertices)
vertices$index=seq(1, nrow(vertices))
vertices$angle= 90 - 360 * vertices$index/my_num
vertices$hjust<-ifelse( vertices$angle < -90, 1, 0)
vertices$angle<-ifelse(vertices$angle < -90, vertices$angle+180, vertices$angle)
# Add upper part of the tree to vertices
tmp=ICD %>% filter(meaning_L3 %in% vertices$name) %>% select(meaning_L1, meaning_L2) %>% unique()
name=c(0, as.character(tmp$meaning_L1), as.character(tmp$meaning_L2)) %>% unique()
toadd = data.frame( matrix(nrow = length(name), ncol = ncol(vertices)))
names(toadd) = names(vertices)
toadd$name=name
vertices=rbind(toadd, vertices) %>% droplevels()
# Add upper part of the tree to hierarchy
tmp1=ICD %>% filter(meaning_L3 %in% vertices$name) %>% mutate(origin=0) %>% select(origin, meaning_L1) %>% unique()
tmp2=ICD %>% filter(meaning_L3 %in% vertices$name) %>% select(meaning_L1, meaning_L2) %>% unique()
colnames(tmp1) = colnames(tmp2) = c("from", "to")
hierarchy=rbind(tmp1, tmp2, hierarchy)
# Create graph structure
mygraph <- graph_from_data_frame( hierarchy, vertices = vertices)
# Transform the adjacency connection of comorbidity index in 2 vectors: from and to.
connexions = CI_L3_long %>% filter( D1 %in% vertices$name) %>% filter( D2 %in% vertices$name) %>% filter(value>threshold)
# to number
from = match( connexions$D1, vertices$name)
to = match( connexions$D2, vertices$name)
# Do the graph
p=ggraph(mygraph, layout = 'dendrogram', circular = TRUE) +
# Add the connections
geom_conn_bundle(data = get_con(from = from, to = to, value=connexions$value), alpha = 0.2, tension = 0.9, aes(size=11, colour = value)) +
scale_edge_colour_distiller(palette = "RdPu", trans = "log") +
# Add the points
geom_node_point(aes(filter = leaf, x = x*1.05, y=y*1.05, size=val, colour=meaning_L2), alpha=0.5) +
scale_color_manual(values= colorRampPalette(brewer.pal(9,"Paired"))(22)[sample(seq(1,22),40, replace=TRUE)]) +
scale_size_continuous(range = c(0.5,12)) +
# Add the labels
geom_node_text(aes(x = x*1.1, y=y*1.1, filter = leaf, label=substr(name, 1, nchar), angle = angle, color=meaning_L2, hjust=hjust), size=label_size, alpha=1) +
# General features
labs(x="", y="") +
theme_void() +
geom_label( aes(label=chapter_name[1,1]), x=0, y=1.4, size=title_size ) +
theme(
legend.position="none",
#plot.margin=unit(rep(-2,4),"cm"),
plot.background = element_rect(fill = "#f5f5f2", color = NA),
panel.background = element_rect(fill = "#f5f5f2", color = NA)
) +
expand_limits(x = c(-my_expand, my_expand), y = c(-my_expand, my_expand))
return(p)
}
png( "~/Dropbox/QBI/3_UK_BIOBANK_COMO_PROJECT/3_FIGURE/Edge_Bundle_Mental.png", width=1000, height=1000)
make_edge_bundle(x=5, nchar=3, threshold=40, my_expand=1.2, title_size=5, label_size=5)
dev.off()
png( "IMG/Edge_Bundle_Mental.png", width=1000, height=1000)
make_edge_bundle(x=5, nchar=3, threshold=40, my_expand=1.2, title_size=5, label_size=5)
make_edge_bundle(x=5, nchar=3, threshold=40, my_expand=1.2, title_size=5, label_size=5)
dev.off()
png( "IMG/Edge_Bundle_Mental.png", width=1000, height=1000)
make_edge_bundle(x=5, nchar=3, threshold=40, my_expand=1.2, title_size=5, label_size=5)
dev.off()
library(gridExtra)
library(grid)
my_list = vector("list", 15)
num=0
for(i in c(11,12,13,14,9,3,4,7,1,19,2,6,10,5,15)){
num=num+1
print(i)
my_list[[num]] = make_edge_bundle(i, nchar=3, threshold=20, my_expand=1.2, title_size=4 , label_size=2)
}
# Why does this does not work? do.call("grid.arrange", c(my_list, ncol=3))
png( "IMG/all_edge_bundle.png", width=1300, height=900)
grid.arrange(my_list[[1]], my_list[[2]], my_list[[3]], my_list[[4]], my_list[[5]], my_list[[6]], my_list[[7]], my_list[[8]], my_list[[9]], my_list[[10]], my_list[[11]], my_list[[12]], my_list[[13]], my_list[[14]], my_list[[15]], ncol=5)
dev.off()
make_edge_bundle=function(x, nchar, threshold, my_expand, title_size, label_size){
# select a chapter
chapter=x
chapter_name = ICD %>% filter(node_L1==x) %>% mutate(long=gsub("Diseases of the", "", long)) %>% select(short)   %>% unique()
# Create the hierarchy data frame of the data.
hierarchy= ICD %>%
filter(node_L1==chapter) %>%
select(meaning_L2, meaning_L3) %>%
arrange(meaning_L2, meaning_L3) %>%
unique()
colnames(hierarchy)=c("from", "to")
# Create final nodes (leaves) data frame. For each point I need its size (num of occurence of the disease) + its group (to set its color) + it's heritability
vertices = data.frame(name = unique( as.character(hierarchy$to)) )
tmp=comoL3_long %>% filter(disease1 == disease2) %>% select(disease1, value) %>% mutate(val=value/max(value)*100)
vertices = merge(vertices, tmp, by.x="name", by.y="disease1", all.x=T)
vertices = merge( vertices, ICD, by.x="name", by.y = "meaning_L3", all.x=T) %>% select(name, val, meaning_L1, meaning_L2) %>% unique
# calculate the ANGLE of the labels
my_num=nrow(vertices)
vertices$index=seq(1, nrow(vertices))
vertices$angle= 90 - 360 * vertices$index/my_num
vertices$hjust<-ifelse( vertices$angle < -90, 1, 0)
vertices$angle<-ifelse(vertices$angle < -90, vertices$angle+180, vertices$angle)
# Add upper part of the tree to vertices
tmp=ICD %>% filter(meaning_L3 %in% vertices$name) %>% select(meaning_L1, meaning_L2) %>% unique()
name=c(0, as.character(tmp$meaning_L1), as.character(tmp$meaning_L2)) %>% unique()
toadd = data.frame( matrix(nrow = length(name), ncol = ncol(vertices)))
names(toadd) = names(vertices)
toadd$name=name
vertices=rbind(toadd, vertices) %>% droplevels()
# Add upper part of the tree to hierarchy
tmp1=ICD %>% filter(meaning_L3 %in% vertices$name) %>% mutate(origin=0) %>% select(origin, meaning_L1) %>% unique()
tmp2=ICD %>% filter(meaning_L3 %in% vertices$name) %>% select(meaning_L1, meaning_L2) %>% unique()
colnames(tmp1) = colnames(tmp2) = c("from", "to")
hierarchy=rbind(tmp1, tmp2, hierarchy)
# Create graph structure
mygraph <- graph_from_data_frame( hierarchy, vertices = vertices)
# Transform the adjacency connection of comorbidity index in 2 vectors: from and to.
connexions = CI_L3_long %>% filter( D1 %in% vertices$name) %>% filter( D2 %in% vertices$name) %>% filter(value>threshold)
# to number
from = match( connexions$D1, vertices$name)
to = match( connexions$D2, vertices$name)
# Do the graph
p=ggraph(mygraph, layout = 'dendrogram', circular = TRUE) +
# Add the connections
geom_conn_bundle(data = get_con(from = from, to = to, value=connexions$value), alpha = 0.2, tension = 0.9, aes(size=11, colour = value)) +
scale_edge_colour_distiller(palette = "RdPu", trans = "log") +
# Add the points
geom_node_point(aes(filter = leaf, x = x*1.05, y=y*1.05, size=val, colour=meaning_L2), alpha=0.5) +
scale_color_manual(values= colorRampPalette(brewer.pal(9,"Paired"))(22)[sample(seq(1,22),40, replace=TRUE)]) +
scale_size_continuous(range = c(0.5,12)) +
# Add the labels
geom_node_text(aes(x = x*1.1, y=y*1.1, filter = leaf, label=substr(name, 1, nchar), angle = angle, color=meaning_L2, hjust=hjust), size=label_size, alpha=1) +
# General features
labs(x="", y="") +
theme_void() +
geom_label( aes(label=chapter_name[1,1]), x=0, y=1.4, size=title_size ) +
theme(
legend.position="none",
#plot.margin=unit(rep(-2,4),"cm"),
plot.background = element_rect(fill = "#f5f5f2", color = NA),
panel.background = element_rect(fill = "#f5f5f2", color = NA)
) +
expand_limits(x = c(-my_expand, my_expand), y = c(-my_expand, my_expand))
return(p)
}
make_edge_bundle(x=5, nchar=30, threshold=40, my_expand=1.2, title_size=5, label_size=5)
make_edge_bundle(x=5, nchar=30, threshold=40, my_expand=3.2, title_size=5, label_size=5)
png( "IMG/Edge_Bundle_Mental.png", width=900, height=900)
make_edge_bundle(x=5, nchar=30, threshold=40, my_expand=3.2, title_size=5, label_size=5)
dev.off()
png( "IMG/Edge_Bundle_Mental.png", width=900, height=900)
make_edge_bundle(x=5, nchar=30, threshold=40, my_expand=3.2, title_size=5, label_size=5)
dev.off()
png( "IMG/Edge_Bundle_Mental.png", width=900, height=900)
make_edge_bundle(x=5, nchar=30, threshold=40, my_expand=2.2, title_size=5, label_size=5)
dev.off()
png( "IMG/Edge_Bundle_Mental.png", width=900, height=900)
make_edge_bundle(x=5, nchar=30, threshold=40, my_expand=1.8, title_size=5, label_size=5)
dev.off()
library(gridExtra)
library(grid)
my_list = vector("list", 15)
num=0
for(i in c(11,12,13,14,9,3,4,7,1,19,2,6,10,5,15)){
num=num+1
my_list[[num]] = make_edge_bundle(i, nchar=3, threshold=20, my_expand=1.6, title_size=4 , label_size=2)
}
# Why does this does not work? do.call("grid.arrange", c(my_list, ncol=3))
png( "IMG/all_edge_bundle.png", width=900, height=900)
grid.arrange(my_list[[1]], my_list[[2]], my_list[[3]], my_list[[4]], my_list[[5]], my_list[[6]], my_list[[7]], my_list[[8]], my_list[[9]], my_list[[10]], my_list[[11]], my_list[[12]], my_list[[13]], my_list[[14]], my_list[[15]], ncol=4)
dev.off()
#render your sweet site.
rmarkdown::render_site()
